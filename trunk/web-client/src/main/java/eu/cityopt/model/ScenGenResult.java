package eu.cityopt.model;

// Generated 08.04.2015 18:12:50 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Scengenresult generated by hbm2java
 */
@Entity
@Table(name = "scengenresult", schema = "public")
public class ScenGenResult extends VersionModel implements java.io.Serializable {

	private int scengenresultid;
	private Scenario scenario;
	private ScenarioGenerator scenariogenerator;
	private Boolean feasible;
	private Boolean paretooptimal;
	private Set<ObjectiveFunctionResult> objectivefunctionresults = new HashSet<ObjectiveFunctionResult>(
			0);
	private Set<DecisionVariableResult> decisionvariableresults = new HashSet<DecisionVariableResult>(
			0);
	private Set<OptConstraintResult> optconstraintresults = new HashSet<OptConstraintResult>(
			0);

	public ScenGenResult() {
	}

	public ScenGenResult(int scengenresultid, Scenario scenario,
			ScenarioGenerator scenariogenerator) {
		this.scengenresultid = scengenresultid;
		this.scenario = scenario;
		this.scenariogenerator = scenariogenerator;
	}

	public ScenGenResult(int scengenresultid, Scenario scenario,
			ScenarioGenerator scenariogenerator, Boolean feasible,
			Boolean paretooptimal,
			Set<ObjectiveFunctionResult> objectivefunctionresults,
			Set<DecisionVariableResult> decisionvariableresults,
			Set<OptConstraintResult> optconstraintresults) {
		this.scengenresultid = scengenresultid;
		this.scenario = scenario;
		this.scenariogenerator = scenariogenerator;
		this.feasible = feasible;
		this.paretooptimal = paretooptimal;
		this.objectivefunctionresults = objectivefunctionresults;
		this.decisionvariableresults = decisionvariableresults;
		this.optconstraintresults = optconstraintresults;
	}

	public ScenGenResult copy() {
		ScenGenResult c = new ScenGenResult();
		c.scengenresultid = this.scengenresultid;
		c.scenario = this.scenario;
		c.scenariogenerator = this.scenariogenerator;
		c.feasible = this.feasible;
		c.paretooptimal = this.paretooptimal;
		c.objectivefunctionresults = this.objectivefunctionresults;
		c.decisionvariableresults = this.decisionvariableresults;
		c.optconstraintresults = this.optconstraintresults;
		return c;
	}
	
	@Id
	@Column(name = "scengenresultid", unique = true, nullable = false)
	@SequenceGenerator(name="scengenresult_scengenresultid_seq",sequenceName="scengenresult_scengenresultid_seq") 
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator="scengenresult_scengenresultid_seq")
	public int getScengenresultid() {
		return this.scengenresultid;
	}

	public void setScengenresultid(int scengenresultid) {
		this.scengenresultid = scengenresultid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "scenid", nullable = false)
	public Scenario getScenario() {
		return this.scenario;
	}

	public void setScenario(Scenario scenario) {
		this.scenario = scenario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "scengenid", nullable = false)
	public ScenarioGenerator getScenariogenerator() {
		return this.scenariogenerator;
	}

	public void setScenariogenerator(ScenarioGenerator scenariogenerator) {
		this.scenariogenerator = scenariogenerator;
	}

	@Column(name = "feasible")
	public Boolean getFeasible() {
		return this.feasible;
	}

	public void setFeasible(Boolean feasible) {
		this.feasible = feasible;
	}

	@Column(name = "paretooptimal")
	public Boolean getParetooptimal() {
		return this.paretooptimal;
	}

	public void setParetooptimal(Boolean paretooptimal) {
		this.paretooptimal = paretooptimal;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "scengenresult")
	public Set<ObjectiveFunctionResult> getObjectivefunctionresults() {
		return this.objectivefunctionresults;
	}

	public void setObjectivefunctionresults(
			Set<ObjectiveFunctionResult> objectivefunctionresults) {
		this.objectivefunctionresults = objectivefunctionresults;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "scengenresult")
	public Set<DecisionVariableResult> getDecisionvariableresults() {
		return this.decisionvariableresults;
	}

	public void setDecisionvariableresults(
			Set<DecisionVariableResult> decisionvariableresults) {
		this.decisionvariableresults = decisionvariableresults;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "scengenresult")
	public Set<OptConstraintResult> getOptconstraintresults() {
		return this.optconstraintresults;
	}

	public void setOptconstraintresults(
			Set<OptConstraintResult> optconstraintresults) {
		this.optconstraintresults = optconstraintresults;
	}

}
